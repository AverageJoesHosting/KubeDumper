#!/bin/bash

# ================================
# Check for IMDS Vulnerability with Service Account Tokens Saved
# ================================

# Logging function
log() {
    local message=$1
    local level=${2:-INFO}
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $message"
}

# Retry logic for commands
retry_command() {
    local retries=3
    local count=0
    until "$@"; do
        ((count++)) || true
        if [ "$count" -ge "$retries" ]; then
            log "Command failed after $retries attempts: $*" ERROR
            return 1
        fi
        sleep 2
    done
}

# Deploy temporary NGINX pod for testing
deploy_nginx() {
    local namespace=$1
    log "Deploying temporary NGINX pod in namespace '$namespace'..." INFO

    # Check if we can deploy pods
    if ! kubectl auth can-i create pods -n "$namespace" > /dev/null 2>&1; then
        log "Insufficient permissions to deploy pods in namespace '$namespace'." ERROR
        return 1
    fi

    kubectl run nginx-test --image=nginx --restart=Never -n "$namespace" -- sleep 3600 >/dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        log "Failed to deploy NGINX pod in namespace '$namespace'." ERROR
        return 1
    fi
    log "NGINX pod deployed successfully in namespace '$namespace'." INFO
}

# Cleanup temporary NGINX pod after testing
cleanup_nginx() {
    local namespace=$1
    log "Cleaning up temporary NGINX pod in namespace '$namespace'..." INFO
    kubectl delete pod nginx-test -n "$namespace" --ignore-not-found >/dev/null 2>&1
    log "Temporary NGINX pod cleanup completed for namespace '$namespace'." INFO
}

# Main function to check IMDS vulnerability
check_imds_vulnerability() {
    log "Checking for IMDS vulnerabilities..." INFO
    log "Starting check_imds_vulnerability." INFO

    # Ensure output directory exists
    mkdir -p "$OUTPUT_DIR" || { log "Failed to create output directory: $OUTPUT_DIR" ERROR; exit 1; }

    for ns in $(kubectl get namespaces -o jsonpath="{.items[*].metadata.name}"); do
        log "Scanning namespace '$ns' for IMDS vulnerabilities..." INFO
        local ns_dir="$OUTPUT_DIR/$ns/imds_vulnerability"

        if [ "$DRY_RUN" = "true" ]; then
            log "[DRY-RUN] Would create directory $ns_dir and perform IMDS checks in namespace '$ns'." WARN
            continue
        fi

        mkdir -p "$ns_dir" || { log "Error: Failed to create directory $ns_dir." ERROR; continue; }

        # Deploy temporary NGINX pod for testing
        deploy_nginx "$ns" || continue

        # List all pods in the namespace
        pods=$(kubectl get pods -n "$ns" -o jsonpath="{.items[*].metadata.name}" 2>/dev/null)
        if [[ $? -ne 0 || -z "$pods" ]]; then
            log "No pods found or failed to retrieve pods in namespace '$ns'." WARN
            cleanup_nginx "$ns"
            continue
        fi

        # Loop through each pod and perform the IMDS checks
        for pod in $pods; do
            log "Testing IMDS access for pod '$pod' in namespace '$ns'..." INFO
            local pod_dir="$ns_dir/$pod"
            mkdir -p "$pod_dir" || { log "Error: Failed to create directory $pod_dir." ERROR; continue; }

            # Get the service account associated with the pod
            service_account=$(kubectl get pod -n "$ns" "$pod" -o jsonpath="{.spec.serviceAccountName}")
            if [[ -z "$service_account" ]]; then
                log "No service account found for pod '$pod' in namespace '$ns'." WARN
                continue
            fi
            log "Pod '$pod' is using service account '$service_account'." INFO

            # Get the service account token from the pod
            sa_token=$(kubectl exec -n "$ns" "$pod" -- cat /var/run/secrets/kubernetes.io/serviceaccount/token 2>/dev/null)
            if [[ -z "$sa_token" ]]; then
                log "Failed to retrieve token for service account '$service_account' from pod '$pod'." ERROR
                continue
            fi
            log "Retrieved token for service account '$service_account'." INFO

            # Save the service account token to a file
            local sa_token_file="$pod_dir/service_account_token.txt"
            echo "$sa_token" > "$sa_token_file"
            log "Service account token saved to $sa_token_file." INFO

            # Fetch raw metadata
            local raw_metadata_file="$pod_dir/raw_metadata.txt"
            if retry_command kubectl exec -n "$ns" "$pod" -- curl -s --connect-timeout 2 "http://169.254.169.254/latest/meta-data/" > "$raw_metadata_file" 2>/dev/null; then
                if [[ -s "$raw_metadata_file" ]]; then
                    log "Raw metadata captured for pod '$pod' in namespace '$ns'. Saved to $raw_metadata_file." INFO
                else
                    rm -f "$raw_metadata_file"
                    log "No metadata returned for pod '$pod' in namespace '$ns'." WARN
                fi
            else
                log "Failed to retrieve metadata for pod '$pod' in namespace '$ns'." ERROR
                rm -f "$raw_metadata_file"
            fi

            # IAM role validation
            local iam_roles_file="$pod_dir/iam_roles.txt"
            if retry_command kubectl exec -n "$ns" "$pod" -- curl -s --connect-timeout 2 "http://169.254.169.254/latest/meta-data/iam/security-credentials/" > "$iam_roles_file" 2>/dev/null; then
                if [[ -s "$iam_roles_file" ]]; then
                    log "IAM roles detected for pod '$pod' in namespace '$ns'. Saved to $iam_roles_file." INFO
                else
                    rm -f "$iam_roles_file"
                    log "No IAM roles detected for pod '$pod' in namespace '$ns'." WARN
                fi
            else
                log "Failed to retrieve IAM roles for pod '$pod' in namespace '$ns'." ERROR
                rm -f "$iam_roles_file"
            fi

            # IMDSv2 enforcement check
            if ! retry_command kubectl exec -n "$ns" "$pod" -- curl -s -X PUT -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" "http://169.254.169.254/latest/api/token" > /dev/null 2>&1; then
                log "IMDSv2 not enforced for pod '$pod' in namespace '$ns'. IMDSv1 is accessible." WARN
            else
                log "IMDSv2 enforced for pod '$pod' in namespace '$ns'." INFO
            fi


        done

        # Cleanup the temporary NGINX pod
        cleanup_nginx "$ns"
    done

    log "Completed check_imds_vulnerability." SUCCESS
}
